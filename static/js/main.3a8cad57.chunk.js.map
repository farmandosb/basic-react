{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","regexName","regexDni","regexEmail","NameForm","props","state","name","lastname","dni","email","nameError","lastnameError","dniError","emailError","handleInputChange","bind","handleSubmit","event","target","value","this","setState","test","lastNameError","length","valor","substr","alert","preventDefault","onSubmit","className","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,qMCIrCC,G,WAAY,8CACZC,EAAW,sBACXC,EAAa,0J,IAyJJC,E,YAjIb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,GACNC,SAAU,GACVC,IAAK,GACLC,MAAO,GACPC,WAAW,EACXC,eAAe,EACfC,UAAU,EACVC,YAAY,GAGd,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAdH,E,+EAkBDE,GAChB,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MAGrB,OAAQD,EAAOZ,MACb,IAAK,OACHc,KAAKC,SAAS,CAAEf,KAAMa,IACjBnB,EAAUsB,KAAKH,GAGlBC,KAAKC,SAAS,CAAEX,WAAW,IAF3BU,KAAKC,SAAS,CAAEX,WAAW,IAI7B,MACF,IAAK,WACHU,KAAKC,SAAS,CAAEd,SAAUY,IACrBnB,EAAUsB,KAAKH,GAGlBC,KAAKC,SAAS,CAAEE,eAAe,IAF/BH,KAAKC,SAAS,CAAEE,eAAe,IAIjC,MACF,IAAK,MACH,GAAIJ,EAAMK,OAAS,EAAG,CACpB,IAAMC,EAAQN,EAAMO,OAAO,EAAG,GAC9BN,KAAKC,SAAS,CAAEb,IAAKiB,SAIrBL,KAAKC,SAAS,CAAEb,IAAKW,IAChBlB,EAASqB,KAAKH,GAGjBC,KAAKC,SAAS,CAAET,UAAU,IAF1BQ,KAAKC,SAAS,CAAET,UAAU,IAM9B,MACA,IAAK,QACLQ,KAAKC,SAAS,CAAEZ,MAAOU,IAClBjB,EAAWoB,KAAKH,GAGnBC,KAAKC,SAAS,CAAER,YAAY,IAF5BO,KAAKC,SAAS,CAAER,YAAY,O,mCAevBI,GACNG,KAAKf,MAAMK,WAAcU,KAAKf,MAAMM,gBACvCgB,MAAM,4BAA8BP,KAAKf,MAAMC,MAC/CW,EAAMW,oB,+BAMR,OACE,0BAAMC,SAAUT,KAAKJ,cACnB,uCAEE,2BACEV,KAAK,OACLwB,WAAqC,IAAzBV,KAAKf,MAAMK,UAAqB,UAAY,QACxDqB,KAAK,OACLZ,MAAOC,KAAKf,MAAMC,KAClB0B,SAAUZ,KAAKN,qBAEnB,2CAEE,2BACER,KAAK,WACLwB,WAAyC,IAA7BV,KAAKf,MAAMM,cAAyB,UAAY,QAC5DoB,KAAK,OACLZ,MAAOC,KAAKf,MAAME,SAClByB,SAAUZ,KAAKN,qBAEnB,sCAEE,2BACER,KAAK,MACLwB,WAAoC,IAAxBV,KAAKf,MAAMO,SAAoB,UAAY,QACvDmB,KAAK,SACLZ,MAAOC,KAAKf,MAAMG,IAClBwB,SAAUZ,KAAKN,qBAEnB,wCAEE,2BACER,KAAK,QACLwB,WAAsC,IAA1BV,KAAKf,MAAMQ,WAAsB,UAAY,QACzDkB,KAAK,QACLZ,MAAOC,KAAKf,MAAMI,MAClBuB,SAAUZ,KAAKN,qBAEnB,2BAAOiB,KAAK,SAASZ,MAAM,OAAOW,UAAY,c,GA1H/BG,IAAMC,WCjBTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD6HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a8cad57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst regexName = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/;\nconst regexDni = /^((?!(0))[0-9]{8})$/;\nconst regexEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      lastname: '',\n      dni: '',\n      email: '',\n      nameError: false,\n      lastnameError: false,\n      dniError: false,\n      emailError: false\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n\n  }\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n\n\n    switch (target.name) {\n      case \"name\":\n        this.setState({ name: value });\n        if (!regexName.test(value)) {\n          this.setState({ nameError: true });\n        } else {\n          this.setState({ nameError: false });\n        }\n        break;\n      case \"lastname\":\n        this.setState({ lastname: value });\n        if (!regexName.test(value)) {\n          this.setState({ lastNameError: true });\n        } else {\n          this.setState({ lastNameError: false });\n        }\n        break;\n      case \"dni\":\n        if (value.length > 8) {\n          const valor = value.substr(0, 8);\n          this.setState({ dni: valor });\n          //alert(valor);\n\n        } else {\n          this.setState({ dni: value });\n          if (!regexDni.test(value)) {\n            this.setState({ dniError: true });\n          } else {\n            this.setState({ dniError: false });\n          }\n\n        }\n        break;\n        case \"email\":\n        this.setState({ email: value });\n        if (!regexEmail.test(value)) {\n          this.setState({ emailError: true });\n        } else {\n          this.setState({ emailError: false });\n        }\n        break;\n      default:\n        //Declaraciones ejecutadas cuando ninguno de los valores coincide con el valor de la expresi√≥n\n        break;\n\n\n    }\n\n\n  }\n\n  handleSubmit(event) {\n    if (!this.state.nameError || !this.state.lastnameError) {\n      alert('Some data was submitted: ' + this.state.name);\n      event.preventDefault();\n\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input\n            name=\"name\"\n            className={(this.state.nameError === true ? \"invalid\" : \"valid\")}\n            type=\"text\"\n            value={this.state.name}\n            onChange={this.handleInputChange} />\n        </label>\n        <label>\n          Lastname:\n          <input\n            name=\"lastname\"\n            className={(this.state.lastnameError === true ? \"invalid\" : \"valid\")}\n            type=\"text\"\n            value={this.state.lastname}\n            onChange={this.handleInputChange} />\n        </label>\n        <label>\n          DNI:\n          <input\n            name=\"dni\"\n            className={(this.state.dniError === true ? \"invalid\" : \"valid\")}\n            type=\"number\"\n            value={this.state.dni}\n            onChange={this.handleInputChange} />\n        </label>\n        <label>\n          Email:\n          <input\n            name=\"email\"\n            className={(this.state.emailError === true ? \"invalid\" : \"valid\")}\n            type=\"email\"\n            value={this.state.email}\n            onChange={this.handleInputChange} />\n        </label>\n        <input type=\"submit\" value=\"Send\" className = \"send\"/>\n      </form>\n    );\n  }\n}\n\n\n\nexport default NameForm;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NameForm from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<NameForm />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}